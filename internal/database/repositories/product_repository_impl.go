// Code generated by go-template enterprise generator at 2025-09-21T19:40:10+03:30. DO NOT EDIT.

package repositories

import (
	"context"
	"database/sql"
	"fmt"

	"github.com/VeRJiL/go-template/internal/domain/entities"
	"github.com/VeRJiL/go-template/internal/pkg/modules"
)

// productRepository implements ProductRepository interface
type productRepository struct {
	db *sql.DB
}

// NewProductRepository creates a new product repository
func NewProductRepository(db *sql.DB) ProductRepository {
	return &productRepository{
		db: db,
	}
}

// Create inserts a new product into the database
func (r *productRepository) Create(ctx context.Context, entity *entities.Product) error {
	query := `
		INSERT INTO products (name, description, created_at, updated_at, deleted_at)
		VALUES ($1, $2, $3, $4, $5)
		RETURNING id
	`

	err := r.db.QueryRowContext(ctx, query,
		entity.Name,
		entity.Description,
		entity.CreatedAt,
		entity.UpdatedAt,
		entity.DeletedAt,
	).Scan(&entity.ID)

	if err != nil {
		return fmt.Errorf("failed to create product: %w", err)
	}

	return nil
}

// GetByID retrieves a product by ID
func (r *productRepository) GetByID(ctx context.Context, id uint) (*entities.Product, error) {
	query := `SELECT id, name, description, created_at, updated_at, deleted_at FROM products WHERE id = $1 AND deleted_at IS NULL`

	var entity entities.Product
	err := r.db.QueryRowContext(ctx, query, id).Scan(
		&entity.ID,
		&entity.Name,
		&entity.Description,
		&entity.CreatedAt,
		&entity.UpdatedAt,
		&entity.DeletedAt,
	)

	if err != nil {
		if err == sql.ErrNoRows {
			return nil, fmt.Errorf("product with ID %d not found", id)
		}
		return nil, fmt.Errorf("failed to get product by ID: %w", err)
	}

	return &entity, nil
}

// Update updates an existing product
func (r *productRepository) Update(ctx context.Context, entity *entities.Product) error {
	query := `
		UPDATE products
		SET name = $1, description = $2, updated_at = $3
		WHERE id = $4 AND deleted_at IS NULL
	`

	result, err := r.db.ExecContext(ctx, query,
		entity.Name,
		entity.Description,
		entity.UpdatedAt,
		entity.ID,
	)

	if err != nil {
		return fmt.Errorf("failed to update product: %w", err)
	}

	rowsAffected, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("failed to get rows affected: %w", err)
	}

	if rowsAffected == 0 {
		return fmt.Errorf("product with ID %d not found", entity.ID)
	}

	return nil
}

// Delete soft deletes a product
func (r *productRepository) Delete(ctx context.Context, id uint) error {
	query := `UPDATE products SET deleted_at = $1 WHERE id = $2 AND deleted_at IS NULL`

	result, err := r.db.ExecContext(ctx, query, "NOW()", id)
	if err != nil {
		return fmt.Errorf("failed to delete product: %w", err)
	}

	rowsAffected, err := result.RowsAffected()
	if err != nil {
		return fmt.Errorf("failed to get rows affected: %w", err)
	}

	if rowsAffected == 0 {
		return fmt.Errorf("product with ID %d not found", id)
	}

	return nil
}

// List retrieves products with pagination
func (r *productRepository) List(ctx context.Context, filters modules.ListFilters) ([]*entities.Product, int64, error) {
	// Count total records
	countQuery := `SELECT COUNT(*) FROM products WHERE deleted_at IS NULL`
	var total int64
	err := r.db.QueryRowContext(ctx, countQuery).Scan(&total)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to count products: %w", err)
	}

	// Get paginated results
	query := `SELECT id, name, description, created_at, updated_at, deleted_at FROM products WHERE deleted_at IS NULL ORDER BY created_at DESC LIMIT $1 OFFSET $2`

	rows, err := r.db.QueryContext(ctx, query, filters.Limit, filters.Offset)
	if err != nil {
		return nil, 0, fmt.Errorf("failed to list products: %w", err)
	}
	defer rows.Close()

	var products []*entities.Product
	for rows.Next() {
		var product entities.Product
		err := rows.Scan(
			&product.ID,
			&product.Name,
			&product.Description,
			&product.CreatedAt,
			&product.UpdatedAt,
			&product.DeletedAt,
		)
		if err != nil {
			return nil, 0, fmt.Errorf("failed to scan product: %w", err)
		}
		products = append(products, &product)
	}

	if err := rows.Err(); err != nil {
		return nil, 0, fmt.Errorf("row iteration error: %w", err)
	}

	return products, total, nil
}

// Exists checks if a product exists
func (r *productRepository) Exists(ctx context.Context, id uint) (bool, error) {
	query := `SELECT EXISTS(SELECT 1 FROM products WHERE id = $1 AND deleted_at IS NULL)`

	var exists bool
	err := r.db.QueryRowContext(ctx, query, id).Scan(&exists)
	if err != nil {
		return false, fmt.Errorf("failed to check product existence: %w", err)
	}

	return exists, nil
}

// FindByName finds a product by name
func (r *productRepository) FindByName(ctx context.Context, name string) (*entities.Product, error) {
	query := `SELECT id, name, description, created_at, updated_at, deleted_at FROM products WHERE name = $1 AND deleted_at IS NULL`

	var entity entities.Product
	err := r.db.QueryRowContext(ctx, query, name).Scan(
		&entity.ID,
		&entity.Name,
		&entity.Description,
		&entity.CreatedAt,
		&entity.UpdatedAt,
		&entity.DeletedAt,
	)

	if err != nil {
		if err == sql.ErrNoRows {
			return nil, fmt.Errorf("product with name '%s' not found", name)
		}
		return nil, fmt.Errorf("failed to find product by name: %w", err)
	}

	return &entity, nil
}

// FindByNameLike finds products with names matching pattern
func (r *productRepository) FindByNameLike(ctx context.Context, pattern string) ([]*entities.Product, error) {
	query := `SELECT id, name, description, created_at, updated_at, deleted_at FROM products WHERE name ILIKE $1 AND deleted_at IS NULL`

	rows, err := r.db.QueryContext(ctx, query, "%"+pattern+"%")
	if err != nil {
		return nil, fmt.Errorf("failed to query products by name pattern: %w", err)
	}
	defer rows.Close()

	var products []*entities.Product
	for rows.Next() {
		var product entities.Product
		err := rows.Scan(
			&product.ID,
			&product.Name,
			&product.Description,
			&product.CreatedAt,
			&product.UpdatedAt,
			&product.DeletedAt,
		)
		if err != nil {
			return nil, fmt.Errorf("failed to scan product: %w", err)
		}
		products = append(products, &product)
	}

	if err := rows.Err(); err != nil {
		return nil, fmt.Errorf("row iteration error: %w", err)
	}

	return products, nil
}