// Code generated by go-template enterprise generator at 2025-09-21T19:40:10+03:30. DO NOT EDIT.

package modules

import (
	"context"
	"database/sql"

	"github.com/gin-gonic/gin"

	"github.com/VeRJiL/go-template/internal/api/handlers"
	"github.com/VeRJiL/go-template/internal/database/repositories"
	"github.com/VeRJiL/go-template/internal/domain/services"
	"github.com/VeRJiL/go-template/internal/pkg/container"
	"github.com/VeRJiL/go-template/internal/pkg/logger"
	"github.com/VeRJiL/go-template/internal/pkg/modules"
)

// ProductModule implements the Module interface for product functionality
type ProductModule struct {
	name         string
	version      string
	dependencies []string
}

// NewProductModule creates a new product module
func NewProductModule() modules.Module {
	return &ProductModule{
		name:         "product",
		version:      "1.0.0",
		dependencies: []string{}, // Add module dependencies here
	}
}

// Name returns the module name
func (m *ProductModule) Name() string {
	return m.name
}

// Version returns the module version
func (m *ProductModule) Version() string {
	return m.version
}

// Dependencies returns the module dependencies
func (m *ProductModule) Dependencies() []string {
	return m.dependencies
}

// RegisterServices registers module services with the container
func (m *ProductModule) RegisterServices(cont *container.Container) error {
	// Register repository
	cont.RegisterSingleton("productRepository", func(c *container.Container) interface{} {
		db := c.MustGet("db").(*sql.DB)
		return repositories.NewProductRepository(db)
	})

	// Register service
	cont.RegisterSingleton("productService", func(c *container.Container) interface{} {
		repo := c.MustGet("productRepository").(repositories.ProductRepository)
		logger := c.MustGet("logger").(*logger.Logger)
		return services.NewProductService(repo, logger)
	})

	// Register handler
	cont.RegisterSingleton("productHandler", func(c *container.Container) interface{} {
		service := c.MustGet("productService").(services.ProductService)
		logger := c.MustGet("logger").(*logger.Logger)
		return handlers.NewProductHandler(service, logger)
	})

	return nil
}

// RegisterRoutes registers module routes
func (m *ProductModule) RegisterRoutes(router *gin.RouterGroup, deps *modules.Dependencies) error {
	handler := deps.Container.MustGet("productHandler").(*handlers.ProductHandler)

	productGroup := router.Group("/products")
	{
		productGroup.POST("", handler.Create)
		productGroup.GET("", handler.List)
		productGroup.GET("/:id", handler.GetByID)
		productGroup.PUT("/:id", handler.Update)
		productGroup.DELETE("/:id", handler.Delete)

		// Custom routes
		productGroup.GET("/name/:name", handler.FindByName)
		productGroup.GET("/search", handler.SearchByName)
	}

	return nil
}

// Migrate runs database migrations for the module
func (m *ProductModule) Migrate(db *sql.DB) error {
	// Create products table
	query := `CREATE TABLE IF NOT EXISTS products (
		id SERIAL PRIMARY KEY,
		created_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM NOW()),
		updated_at BIGINT NOT NULL DEFAULT EXTRACT(EPOCH FROM NOW()),
		deleted_at BIGINT,
		name VARCHAR(100) NOT NULL UNIQUE,
		description TEXT
	)`

	_, err := db.Exec(query)
	return err
}

// Initialize initializes the module
func (m *ProductModule) Initialize(ctx context.Context) error {
	// Add module initialization logic here
	return nil
}

// Shutdown gracefully shuts down the module
func (m *ProductModule) Shutdown(ctx context.Context) error {
	// Add module cleanup logic here
	return nil
}
