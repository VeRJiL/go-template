// Code generated by go-template enterprise generator at 2025-09-21T19:40:10+03:30. DO NOT EDIT.

package handlers

import (
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"

	"github.com/VeRJiL/go-template/internal/domain/entities"
	"github.com/VeRJiL/go-template/internal/domain/services"
	"github.com/VeRJiL/go-template/internal/pkg/logger"
	"github.com/VeRJiL/go-template/internal/pkg/modules"
)

// ProductHandler handles HTTP requests for products
type ProductHandler struct {
	service services.ProductService
	logger  *logger.Logger
}

// NewProductHandler creates a new product handler
func NewProductHandler(service services.ProductService, logger *logger.Logger) *ProductHandler {
	return &ProductHandler{
		service: service,
		logger:  logger,
	}
}

// Create handles POST requests to create a new product
// @Summary Create a new product
// @Description Create a new product with the provided data
// @Tags products
// @Accept json
// @Produce json
// @Param product body entities.Product true "Product data"
// @Success 201 {object} object "Product created successfully"
// @Failure 400 {object} ErrorResponse "Bad request"
// @Failure 500 {object} ErrorResponse "Internal server error"
// @Router /products [post]
func (h *ProductHandler) Create(c *gin.Context) {
	var entity entities.Product
	if err := c.ShouldBindJSON(&entity); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Invalid request data",
			"message": err.Error(),
		})
		return
	}

	result, err := h.service.Create(c.Request.Context(), &entity)
	if err != nil {
		h.logger.Error("Failed to create product", "error", err)
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to create product",
			"message": err.Error(),
		})
		return
	}

	c.JSON(http.StatusCreated, gin.H{
		"message": "Product created successfully",
		"data":    result,
	})
}

// GetByID handles GET requests to retrieve a product by ID
// @Summary Get product by ID
// @Description Retrieve a product by its ID
// @Tags products
// @Produce json
// @Param id path int true "Product ID"
// @Success 200 {object} object "Product data"
// @Failure 400 {object} ErrorResponse "Bad request"
// @Failure 404 {object} ErrorResponse "Product not found"
// @Failure 500 {object} ErrorResponse "Internal server error"
// @Router /products/{id} [get]
func (h *ProductHandler) GetByID(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.ParseUint(idStr, 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Invalid ID parameter",
			"message": "ID must be a valid number",
		})
		return
	}

	entity, err := h.service.GetByID(c.Request.Context(), uint(id))
	if err != nil {
		h.logger.Error("Failed to get product by ID", "error", err, "id", id)
		c.JSON(http.StatusNotFound, gin.H{
			"error":   "Product not found",
			"message": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Product found successfully",
		"data":    entity,
	})
}

// Update handles PUT requests to update a product
// @Summary Update product
// @Description Update an existing product
// @Tags products
// @Accept json
// @Produce json
// @Param id path int true "Product ID"
// @Param product body entities.Product true "Product data"
// @Success 200 {object} object "Product updated successfully"
// @Failure 400 {object} ErrorResponse "Bad request"
// @Failure 404 {object} ErrorResponse "Product not found"
// @Failure 500 {object} ErrorResponse "Internal server error"
// @Router /products/{id} [put]
func (h *ProductHandler) Update(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.ParseUint(idStr, 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Invalid ID parameter",
			"message": "ID must be a valid number",
		})
		return
	}

	var entity entities.Product
	if err := c.ShouldBindJSON(&entity); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Invalid request data",
			"message": err.Error(),
		})
		return
	}

	result, err := h.service.Update(c.Request.Context(), uint(id), &entity)
	if err != nil {
		h.logger.Error("Failed to update product", "error", err, "id", id)
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to update product",
			"message": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Product updated successfully",
		"data":    result,
	})
}

// Delete handles DELETE requests to delete a product
// @Summary Delete product
// @Description Delete a product by ID
// @Tags products
// @Produce json
// @Param id path int true "Product ID"
// @Success 200 {object} object "Product deleted successfully"
// @Failure 400 {object} ErrorResponse "Bad request"
// @Failure 404 {object} ErrorResponse "Product not found"
// @Failure 500 {object} ErrorResponse "Internal server error"
// @Router /products/{id} [delete]
func (h *ProductHandler) Delete(c *gin.Context) {
	idStr := c.Param("id")
	id, err := strconv.ParseUint(idStr, 10, 32)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Invalid ID parameter",
			"message": "ID must be a valid number",
		})
		return
	}

	if err := h.service.Delete(c.Request.Context(), uint(id)); err != nil {
		h.logger.Error("Failed to delete product", "error", err, "id", id)
		c.JSON(http.StatusNotFound, gin.H{
			"error":   "Failed to delete product",
			"message": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Product deleted successfully",
	})
}

// List handles GET requests to list products
// @Summary List products
// @Description Get a paginated list of products
// @Tags products
// @Produce json
// @Param offset query int false "Offset for pagination" default(0)
// @Param limit query int false "Limit for pagination" default(10)
// @Success 200 {object} object "Products data"
// @Failure 400 {object} ErrorResponse "Bad request"
// @Failure 500 {object} ErrorResponse "Internal server error"
// @Router /products [get]
func (h *ProductHandler) List(c *gin.Context) {
	offsetStr := c.DefaultQuery("offset", "0")
	limitStr := c.DefaultQuery("limit", "10")

	offset, err := strconv.Atoi(offsetStr)
	if err != nil || offset < 0 {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Invalid offset parameter",
			"message": "Offset must be a non-negative number",
		})
		return
	}

	limit, err := strconv.Atoi(limitStr)
	if err != nil || limit <= 0 || limit > 100 {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Invalid limit parameter",
			"message": "Limit must be between 1 and 100",
		})
		return
	}

	filters := modules.ListFilters{
		Offset: offset,
		Limit:  limit,
	}

	entities, total, err := h.service.List(c.Request.Context(), filters)
	if err != nil {
		h.logger.Error("Failed to list products", "error", err)
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to list products",
			"message": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Products retrieved successfully",
		"data":    entities,
		"total":   total,
		"offset":  offset,
		"limit":   limit,
	})
}

// FindByName handles GET requests to find product by name
// @Summary Find product by name
// @Description Retrieve a product by its name
// @Tags products
// @Produce json
// @Param name path string true "Product name"
// @Success 200 {object} object "Product data"
// @Failure 400 {object} ErrorResponse "Bad request"
// @Failure 404 {object} ErrorResponse "Product not found"
// @Failure 500 {object} ErrorResponse "Internal server error"
// @Router /products/name/{name} [get]
func (h *ProductHandler) FindByName(c *gin.Context) {
	name := c.Param("name")
	if name == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Invalid name parameter",
			"message": "Name parameter is required",
		})
		return
	}

	entity, err := h.service.FindByName(c.Request.Context(), name)
	if err != nil {
		h.logger.Error("Failed to find product by name", "error", err, "name", name)
		c.JSON(http.StatusNotFound, gin.H{
			"error":   "Product not found",
			"message": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Product found successfully",
		"data":    entity,
	})
}

// SearchByName handles GET requests to search products by name pattern
// @Summary Search products by name
// @Description Search products by name pattern
// @Tags products
// @Produce json
// @Param q query string true "Search pattern"
// @Success 200 {object} object "Products data"
// @Failure 400 {object} ErrorResponse "Bad request"
// @Failure 500 {object} ErrorResponse "Internal server error"
// @Router /products/search [get]
func (h *ProductHandler) SearchByName(c *gin.Context) {
	pattern := c.Query("q")
	if pattern == "" {
		c.JSON(http.StatusBadRequest, gin.H{
			"error":   "Invalid search parameter",
			"message": "Search query 'q' is required",
		})
		return
	}

	entities, err := h.service.SearchByName(c.Request.Context(), pattern)
	if err != nil {
		h.logger.Error("Failed to search products", "error", err, "pattern", pattern)
		c.JSON(http.StatusInternalServerError, gin.H{
			"error":   "Failed to search products",
			"message": err.Error(),
		})
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message": "Products found successfully",
		"data":    entities,
		"count":   len(entities),
	})
}